{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gunav\\\\Desktop\\\\Free-Engine\\\\src\\\\base\\\\ReadInput.js\";\nimport raw from './data.txt';\nimport App from './App';\nimport { render } from '@testing-library/react';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ReadInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(raw).then(r => r.text()).then(text => {\n      console.log(\"async\");\n      const lines = text.split(\"\\n\");\n      lines.map((line, index) => {\n        let newtokens = line.split(\",\");\n        console.log(tokens);\n        const to = tokens;\n        to.push(newtokens); // tokens.push(newtokens);\n\n        setToken(to);\n      });\n    });\n    console.log(\"useEffect\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gcse-search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), tokens && tokens.map(words => {\n        console.group(tokens.length);\n        return words.map(word => {\n          return /*#__PURE__*/_jsxDEV(App, {\n            name: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this);\n        });\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/gunav/Desktop/Free-Engine/src/base/ReadInput.js"],"names":["raw","App","render","Component","ReadInput","constructor","props","state","tokens","componentDidMount","fetch","then","r","text","console","log","lines","split","map","line","index","newtokens","to","push","setToken","words","group","length","word"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;AAEA,eAAe,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAC7CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAACV,GAAD,CAAL,CACCW,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEME,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAMC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,CAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvB,YAAIC,SAAS,GAAGF,IAAI,CAACF,KAAL,CAAW,GAAX,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AAEA,cAAMc,EAAE,GAAGd,MAAX;AACAc,QAAAA,EAAE,CAACC,IAAH,CAAQF,SAAR,EALuB,CAMvB;;AACJG,QAAAA,QAAQ,CAACF,EAAD,CAAR;AACC,OARD;AASH,KAdD;AAeAR,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AAEDb,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,EAGQM,MAAM,IAAIA,MAAM,CAACU,GAAP,CAAYO,KAAD,IAAW;AAC5BX,QAAAA,OAAO,CAACY,KAAR,CAAclB,MAAM,CAACmB,MAArB;AACA,eACIF,KAAK,CAACP,GAAN,CAAWU,IAAD,IAAU;AACpB,8BACI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAIA;AAAb;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGC,SAJD,CADJ;AAOH,OATS,CAHlB,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkBH;;AA9C4C","sourcesContent":["import raw from './data.txt';\r\nimport App from './App';\r\nimport { render } from '@testing-library/react';\r\nimport {Component} from 'react';\r\n\r\nexport default class ReadInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tokens: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(raw)\r\n        .then(r => r.text())\r\n        .then(text => {\r\n            console.log(\"async\")\r\n            const lines = text.split(\"\\n\");\r\n            lines.map((line, index) => {\r\n                let newtokens = line.split(\",\");\r\n                console.log(tokens);\r\n\r\n                const to = tokens\r\n                to.push(newtokens)\r\n                // tokens.push(newtokens);\r\n            setToken(to)\r\n            })\r\n        }) \r\n        console.log(\"useEffect\")\r\n    }\r\n\r\n    render() {   \r\n        return(\r\n            <div>\r\n                <div className=\"gcse-search\"/>\r\n                {\r\n                    tokens && tokens.map((words) => {\r\n                        console.group(tokens.length)\r\n                        return (\r\n                            words.map((word) => {\r\n                            return(\r\n                                <App name = {word}/>\r\n                            );\r\n                            })\r\n                        );\r\n                    })\r\n                }\r\n                <p>hello</p>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}