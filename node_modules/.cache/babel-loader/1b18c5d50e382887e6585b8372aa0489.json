{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gunav\\\\Desktop\\\\Free-Engine\\\\src\\\\base\\\\ReadInput.js\";\nimport raw from './data.txt';\nimport App from './App';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ReadInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(raw).then(r => r.text()).then(text => {\n      const lines = text.split(\"\\n\");\n      lines.map((line, index) => {\n        let newtokens = line.split(\",\");\n        let temp = this.state.tokens;\n        temp.push(newtokens);\n        this.setState({\n          tokens: temp\n        });\n      });\n    });\n  }\n\n  render() {\n    if (this.state.tokens.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.tokens.map(words => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"appOutline\",\n            children: /*#__PURE__*/_jsxDEV(App, {\n              name: words[0],\n              description: words[1],\n              alternative: words[2]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/gunav/Desktop/Free-Engine/src/base/ReadInput.js"],"names":["raw","App","Component","ReadInput","constructor","props","state","tokens","componentDidMount","fetch","then","r","text","lines","split","map","line","index","newtokens","temp","push","setState","render","length","words"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;AAEA,eAAe,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAC7CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAACT,GAAD,CAAL,CACCU,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEME,IAAI,IAAI;AACV,YAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,IAAX,CAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvB,YAAIC,SAAS,GAAGF,IAAI,CAACF,KAAL,CAAW,GAAX,CAAhB;AACA,YAAIK,IAAI,GAAG,KAAKb,KAAL,CAAWC,MAAtB;AACAY,QAAAA,IAAI,CAACC,IAAL,CAAUF,SAAV;AACA,aAAKG,QAAL,CAAc;AAAEd,UAAAA,MAAM,EAAEY;AAAV,SAAd;AACH,OALD;AAMH,KAVD;AAWH;;AAEDG,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKhB,KAAL,CAAWC,MAAX,CAAkBgB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,0BACI;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJD,MAKK;AACD,0BACI;AAAA,kBAGQ,KAAKjB,KAAL,CAAWC,MAAX,CAAkBQ,GAAlB,CAAuBS,KAAD,IAAW;AAC7B,8BACI;AAAK,YAAA,SAAS,EAAG,YAAjB;AAAA,mCACI,QAAC,GAAD;AAAK,cAAA,IAAI,EAAIA,KAAK,CAAC,CAAD,CAAlB;AAAuB,cAAA,WAAW,EAAIA,KAAK,CAAC,CAAD,CAA3C;AAAgD,cAAA,WAAW,EAAIA,KAAK,CAAC,CAAD;AAApE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SAND;AAHR;AAAA;AAAA;AAAA;AAAA,cADJ;AAcH;AACJ;;AA5C4C","sourcesContent":["import raw from './data.txt';\r\nimport App from './App';\r\nimport {Component} from 'react';\r\n\r\nexport default class ReadInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tokens: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(raw)\r\n        .then(r => r.text())\r\n        .then(text => {\r\n            const lines = text.split(\"\\n\");\r\n            lines.map((line, index) => {\r\n                let newtokens = line.split(\",\");\r\n                let temp = this.state.tokens;\r\n                temp.push(newtokens);\r\n                this.setState({ tokens: temp });\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.tokens.length === 0) {\r\n            return(\r\n                <div></div>\r\n            );\r\n        } \r\n        else {\r\n            return(\r\n                <div>\r\n                    \r\n                    {\r\n                        this.state.tokens.map((words) => {\r\n                            return (\r\n                                <div className = \"appOutline\">\r\n                                    <App name = {words[0]} description = {words[1]} alternative = {words[2]}/>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}