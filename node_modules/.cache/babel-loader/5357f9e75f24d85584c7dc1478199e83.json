{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gunav\\\\Desktop\\\\Free-Engine\\\\src\\\\base\\\\ReadInput.js\";\nimport raw from './data.txt';\nimport App from './App';\nimport { render } from '@testing-library/react';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ReadInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(raw).then(r => r.text()).then(text => {\n      console.log(\"async\");\n      const lines = text.split(\"\\n\");\n      lines.map((line, index) => {\n        let newtokens = line.split(\",\");\n        let temp = this.state.tokens;\n        temp.push(newtokens);\n        this.setState({\n          tokens: temp\n        });\n      });\n    });\n  }\n\n  render() {\n    if (this.state.tokens.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gcse-search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), this.state.tokens.map(words => {\n          return /*#__PURE__*/_jsxDEV(App, {\n            name: words[0],\n            description: words[1],\n            alternative: words[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/gunav/Desktop/Free-Engine/src/base/ReadInput.js"],"names":["raw","App","render","Component","ReadInput","constructor","props","state","tokens","componentDidMount","fetch","then","r","text","console","log","lines","split","map","line","index","newtokens","temp","push","setState","length","words"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;AAEA,eAAe,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAC7CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAACV,GAAD,CAAL,CACCW,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAECF,IAFD,CAEME,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAMC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,CAAd;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvB,YAAIC,SAAS,GAAGF,IAAI,CAACF,KAAL,CAAW,GAAX,CAAhB;AACA,YAAIK,IAAI,GAAG,KAAKf,KAAL,CAAWC,MAAtB;AACAc,QAAAA,IAAI,CAACC,IAAL,CAAUF,SAAV;AACA,aAAKG,QAAL,CAAc;AAAEhB,UAAAA,MAAM,EAAEc;AAAV,SAAd;AACH,OALD;AAMH,KAXD;AAYH;;AAEDpB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKK,KAAL,CAAWC,MAAX,CAAkBiB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,0BACI;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJD,MAKK;AACD,0BACI;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,EAGQ,KAAKlB,KAAL,CAAWC,MAAX,CAAkBU,GAAlB,CAAuBQ,KAAD,IAAW;AAC7B,8BACI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAIA,KAAK,CAAC,CAAD,CAAlB;AAAuB,YAAA,WAAW,EAAIA,KAAK,CAAC,CAAD,CAA3C;AAAgD,YAAA,WAAW,EAAIA,KAAK,CAAC,CAAD;AAApE;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGH,SAJD,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH;AACJ;;AA3C4C","sourcesContent":["import raw from './data.txt';\r\nimport App from './App';\r\nimport { render } from '@testing-library/react';\r\nimport {Component} from 'react';\r\n\r\nexport default class ReadInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tokens: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(raw)\r\n        .then(r => r.text())\r\n        .then(text => {\r\n            console.log(\"async\")\r\n            const lines = text.split(\"\\n\");\r\n            lines.map((line, index) => {\r\n                let newtokens = line.split(\",\");\r\n                let temp = this.state.tokens;\r\n                temp.push(newtokens);\r\n                this.setState({ tokens: temp });\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.tokens.length === 0) {\r\n            return(\r\n                <div></div>\r\n            );\r\n        } \r\n        else {\r\n            return(\r\n                <div>\r\n                    <div className=\"gcse-search\"/>\r\n                    {\r\n                        this.state.tokens.map((words) => {\r\n                            return (\r\n                                <App name = {words[0]} description = {words[1]} alternative = {words[2]}/>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}